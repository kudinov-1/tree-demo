/*
 * This file is generated by jOOQ.
 */
package demo.tree.pojo.tables.daos;


import demo.tree.pojo.tables.DocumentTree;
import demo.tree.pojo.tables.records.DocumentTreeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class DocumentTreeDao extends DAOImpl<DocumentTreeRecord, demo.tree.pojo.tables.pojos.DocumentTree, Long> {

    /**
     * Create a new DocumentTreeDao without any configuration
     */
    public DocumentTreeDao() {
        super(DocumentTree.DOCUMENT_TREE, demo.tree.pojo.tables.pojos.DocumentTree.class);
    }

    /**
     * Create a new DocumentTreeDao with an attached configuration
     */
    @Autowired
    public DocumentTreeDao(Configuration configuration) {
        super(DocumentTree.DOCUMENT_TREE, demo.tree.pojo.tables.pojos.DocumentTree.class, configuration);
    }

    @Override
    public Long getId(demo.tree.pojo.tables.pojos.DocumentTree object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchById(Long... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public demo.tree.pojo.tables.pojos.DocumentTree fetchOneById(Long value) {
        return fetchOne(DocumentTree.DOCUMENT_TREE.ID, value);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfParentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByParentId(Long... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByName(String... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByDescription(String... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>left_branch BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfLeftBranch(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.LEFT_BRANCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>left_branch IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByLeftBranch(Long... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.LEFT_BRANCH, values);
    }

    /**
     * Fetch records that have <code>right_branch BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfRightBranch(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.RIGHT_BRANCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>right_branch IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByRightBranch(Long... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.RIGHT_BRANCH, values);
    }

    /**
     * Fetch records that have <code>level BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchRangeOfLevel(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(DocumentTree.DOCUMENT_TREE.LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>level IN (values)</code>
     */
    public List<demo.tree.pojo.tables.pojos.DocumentTree> fetchByLevel(Long... values) {
        return fetch(DocumentTree.DOCUMENT_TREE.LEVEL, values);
    }
}
