/*
 * This file is generated by jOOQ.
 */
package demo.tree.pojo.tables;


import demo.tree.pojo.Indexes;
import demo.tree.pojo.Keys;
import demo.tree.pojo.TreeDemo;
import demo.tree.pojo.tables.records.DocumentTreeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentTree extends TableImpl<DocumentTreeRecord> {

    private static final long serialVersionUID = 1632401018;

    /**
     * The reference instance of <code>tree_demo.document_tree</code>
     */
    public static final DocumentTree DOCUMENT_TREE = new DocumentTree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentTreeRecord> getRecordType() {
        return DocumentTreeRecord.class;
    }

    /**
     * The column <code>tree_demo.document_tree.id</code>.
     */
    public final TableField<DocumentTreeRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tree_demo.document_tree.parent_id</code>.
     */
    public final TableField<DocumentTreeRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>tree_demo.document_tree.name</code>.
     */
    public final TableField<DocumentTreeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>tree_demo.document_tree.description</code>.
     */
    public final TableField<DocumentTreeRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>tree_demo.document_tree.left_branch</code>.
     */
    public final TableField<DocumentTreeRecord, Long> LEFT_BRANCH = createField(DSL.name("left_branch"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tree_demo.document_tree.right_branch</code>.
     */
    public final TableField<DocumentTreeRecord, Long> RIGHT_BRANCH = createField(DSL.name("right_branch"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tree_demo.document_tree.level</code>.
     */
    public final TableField<DocumentTreeRecord, Long> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>tree_demo.document_tree</code> table reference
     */
    public DocumentTree() {
        this(DSL.name("document_tree"), null);
    }

    /**
     * Create an aliased <code>tree_demo.document_tree</code> table reference
     */
    public DocumentTree(String alias) {
        this(DSL.name(alias), DOCUMENT_TREE);
    }

    /**
     * Create an aliased <code>tree_demo.document_tree</code> table reference
     */
    public DocumentTree(Name alias) {
        this(alias, DOCUMENT_TREE);
    }

    private DocumentTree(Name alias, Table<DocumentTreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentTree(Name alias, Table<DocumentTreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DocumentTree(Table<O> child, ForeignKey<O, DocumentTreeRecord> key) {
        super(child, key, DOCUMENT_TREE);
    }

    @Override
    public Schema getSchema() {
        return TreeDemo.TREE_DEMO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCUMENT_TREE_DOC_TREE_LEFT_IDX, Indexes.DOCUMENT_TREE_DOC_TREE_LEFTRIGHT_IDX, Indexes.DOCUMENT_TREE_DOC_TREE_PARENT_FK_IDX, Indexes.DOCUMENT_TREE_DOC_TREE_RIGHT_IDX);
    }

    @Override
    public Identity<DocumentTreeRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOCUMENT_TREE;
    }

    @Override
    public UniqueKey<DocumentTreeRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_TREE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentTreeRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentTreeRecord>>asList(Keys.KEY_DOCUMENT_TREE_PRIMARY);
    }

    @Override
    public List<ForeignKey<DocumentTreeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DocumentTreeRecord, ?>>asList(Keys.DOC_TREE_PARENT_FK);
    }

    public DocumentTree documentTree() {
        return new DocumentTree(this, Keys.DOC_TREE_PARENT_FK);
    }

    @Override
    public DocumentTree as(String alias) {
        return new DocumentTree(DSL.name(alias), this);
    }

    @Override
    public DocumentTree as(Name alias) {
        return new DocumentTree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTree rename(String name) {
        return new DocumentTree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTree rename(Name name) {
        return new DocumentTree(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, Long, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
